/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void InitializeDartApi(
    ffi.Pointer<ffi.Void> p0,
  ) {
    _InitializeDartApi ??=
        _dylib.lookupFunction<_c_InitializeDartApi, _dart_InitializeDartApi>(
            'InitializeDartApi');

    return _InitializeDartApi(
      p0,
    );
  }

  _dart_InitializeDartApi _InitializeDartApi;

  void StartWork(
    int p0,
  ) {
    _StartWork ??=
        _dylib.lookupFunction<_c_StartWork, _dart_StartWork>('StartWork');
    return _StartWork(
      p0,
    );
  }

  _dart_StartWork _StartWork;

  void StopWork(
    int p0,
  ) {
    _StopWork ??=
        _dylib.lookupFunction<_c_StopWork, _dart_StopWork>('StopWork');
    return _StopWork(
      p0,
    );
  }

  _dart_StopWork _StopWork;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class _GoString_ extends ffi.Struct {
  ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  int n;
}

class GoInterface extends ffi.Struct {
  ffi.Pointer<ffi.Void> t;

  ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  int len;

  @ffi.Int64()
  int cap;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

typedef _c_InitializeDartApi = ffi.Void Function(
  ffi.Pointer<ffi.Void> p0,
);

typedef _dart_InitializeDartApi = void Function(
  ffi.Pointer<ffi.Void> p0,
);

typedef _c_StartWork = ffi.Void Function(
  ffi.Int64 p0,
);

typedef _dart_StartWork = void Function(
  int p0,
);

typedef _c_StopWork = ffi.Void Function(
  ffi.Int64 p0,
);

typedef _dart_StopWork = void Function(
  int p0,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
