// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Docs for SquashArchiverLib
class SquashArchiverLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SquashArchiverLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SquashArchiverLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void InitNewNativeDartPort(
    ffi.Pointer<ffi.Void> api,
  ) {
    return _InitNewNativeDartPort(
      api,
    );
  }

  late final _InitNewNativeDartPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'InitNewNativeDartPort');
  late final _InitNewNativeDartPort = _InitNewNativeDartPortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  int CloseNativeDartPort(
    int port,
  ) {
    return _CloseNativeDartPort(
      port,
    );
  }

  late final _CloseNativeDartPortPtr =
      _lookup<ffi.NativeFunction<GoUint8 Function(GoInt64)>>(
          'CloseNativeDartPort');
  late final _CloseNativeDartPort =
      _CloseNativeDartPortPtr.asFunction<int Function(int)>();

  void ListArchive(
    int port,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> orderBy,
    ffi.Pointer<ffi.Char> orderDir,
    ffi.Pointer<ffi.Char> listDirectoryPath,
    int gitIgnorePatternPtrAddr,
    int recursive,
  ) {
    return _ListArchive(
      port,
      filename,
      password,
      orderBy,
      orderDir,
      listDirectoryPath,
      gitIgnorePatternPtrAddr,
      recursive,
    );
  }

  late final _ListArchivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GoInt64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GoInt64,
              GoUint8)>>('ListArchive');
  late final _ListArchive = _ListArchivePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int)>();

  void FreeListArchiveMemory(
    int ptrAddr,
  ) {
    return _FreeListArchiveMemory(
      ptrAddr,
    );
  }

  late final _FreeListArchiveMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>(
          'FreeListArchiveMemory');
  late final _FreeListArchiveMemory =
      _FreeListArchiveMemoryPtr.asFunction<void Function(int)>();

  void IsArchiveEncrypted(
    int port,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _IsArchiveEncrypted(
      port,
      filename,
      password,
    );
  }

  late final _IsArchiveEncryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt64, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IsArchiveEncrypted');
  late final _IsArchiveEncrypted = _IsArchiveEncryptedPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void FreeIsArchiveEncryptedMemory(
    int ptrAddr,
  ) {
    return _FreeIsArchiveEncryptedMemory(
      ptrAddr,
    );
  }

  late final _FreeIsArchiveEncryptedMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>(
          'FreeIsArchiveEncryptedMemory');
  late final _FreeIsArchiveEncryptedMemory =
      _FreeIsArchiveEncryptedMemoryPtr.asFunction<void Function(int)>();

  void PackFiles(
    int port,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> password,
    int gitIgnorePatternPtrAddr,
    int fileListPtrAddr,
  ) {
    return _PackFiles(
      port,
      filename,
      password,
      gitIgnorePatternPtrAddr,
      fileListPtrAddr,
    );
  }

  late final _PackFilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt64, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GoInt64, GoInt64)>>('PackFiles');
  late final _PackFiles = _PackFilesPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  void FreePackFilesMemory(
    int ptrAddr,
  ) {
    return _FreePackFilesMemory(
      ptrAddr,
    );
  }

  late final _FreePackFilesMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>(
          'FreePackFilesMemory');
  late final _FreePackFilesMemory =
      _FreePackFilesMemoryPtr.asFunction<void Function(int)>();

  void UnpackFiles(
    int port,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> destination,
    int gitIgnorePatternPtrAddr,
    int fileListPtrAddr,
  ) {
    return _UnpackFiles(
      port,
      filename,
      password,
      destination,
      gitIgnorePatternPtrAddr,
      fileListPtrAddr,
    );
  }

  late final _UnpackFilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GoInt64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GoInt64,
              GoInt64)>>('UnpackFiles');
  late final _UnpackFiles = _UnpackFilesPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  void FreeUnpackFilesMemory(
    int ptrAddr,
  ) {
    return _FreeUnpackFilesMemory(
      ptrAddr,
    );
  }

  late final _FreeUnpackFilesMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>(
          'FreeUnpackFilesMemory');
  late final _FreeUnpackFilesMemory =
      _FreeUnpackFilesMemoryPtr.asFunction<void Function(int)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef GoUint8 = ffi.UnsignedChar;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;
