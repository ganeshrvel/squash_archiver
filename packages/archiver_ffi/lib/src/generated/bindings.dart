// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Docs for SquashArchiverLib
class SquashArchiverLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SquashArchiverLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SquashArchiverLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void InitNewNativeDartPort(
    ffi.Pointer<ffi.Void> api,
  ) {
    return _InitNewNativeDartPort(
      api,
    );
  }

  late final _InitNewNativeDartPort_ptr =
      _lookup<ffi.NativeFunction<_c_InitNewNativeDartPort>>(
          'InitNewNativeDartPort');
  late final _dart_InitNewNativeDartPort _InitNewNativeDartPort =
      _InitNewNativeDartPort_ptr.asFunction<_dart_InitNewNativeDartPort>();

  int CloseNativeDartPort(
    int port,
  ) {
    return _CloseNativeDartPort(
      port,
    );
  }

  late final _CloseNativeDartPort_ptr =
      _lookup<ffi.NativeFunction<_c_CloseNativeDartPort>>(
          'CloseNativeDartPort');
  late final _dart_CloseNativeDartPort _CloseNativeDartPort =
      _CloseNativeDartPort_ptr.asFunction<_dart_CloseNativeDartPort>();

  void TestFFI(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> orderBy,
    ffi.Pointer<ffi.Int8> orderDir,
    ffi.Pointer<ffi.Int8> listDirectoryPath,
    int gitIgnorePatternPtrAddr,
    int recursive,
  ) {
    return _TestFFI(
      port,
      filename,
      password,
      orderBy,
      orderDir,
      listDirectoryPath,
      gitIgnorePatternPtrAddr,
      recursive,
    );
  }

  late final _TestFFI_ptr = _lookup<ffi.NativeFunction<_c_TestFFI>>('TestFFI');
  late final _dart_TestFFI _TestFFI = _TestFFI_ptr.asFunction<_dart_TestFFI>();

  void ListArchive(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> orderBy,
    ffi.Pointer<ffi.Int8> orderDir,
    ffi.Pointer<ffi.Int8> listDirectoryPath,
    int gitIgnorePatternPtrAddr,
    int recursive,
  ) {
    return _ListArchive(
      port,
      filename,
      password,
      orderBy,
      orderDir,
      listDirectoryPath,
      gitIgnorePatternPtrAddr,
      recursive,
    );
  }

  late final _ListArchive_ptr =
      _lookup<ffi.NativeFunction<_c_ListArchive>>('ListArchive');
  late final _dart_ListArchive _ListArchive =
      _ListArchive_ptr.asFunction<_dart_ListArchive>();

  void FreeListArchiveMemory(
    int ptrAddr,
  ) {
    return _FreeListArchiveMemory(
      ptrAddr,
    );
  }

  late final _FreeListArchiveMemory_ptr =
      _lookup<ffi.NativeFunction<_c_FreeListArchiveMemory>>(
          'FreeListArchiveMemory');
  late final _dart_FreeListArchiveMemory _FreeListArchiveMemory =
      _FreeListArchiveMemory_ptr.asFunction<_dart_FreeListArchiveMemory>();

  void IsArchiveEncrypted(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _IsArchiveEncrypted(
      port,
      filename,
      password,
    );
  }

  late final _IsArchiveEncrypted_ptr =
      _lookup<ffi.NativeFunction<_c_IsArchiveEncrypted>>('IsArchiveEncrypted');
  late final _dart_IsArchiveEncrypted _IsArchiveEncrypted =
      _IsArchiveEncrypted_ptr.asFunction<_dart_IsArchiveEncrypted>();

  void FreeIsArchiveEncryptedMemory(
    int ptrAddr,
  ) {
    return _FreeIsArchiveEncryptedMemory(
      ptrAddr,
    );
  }

  late final _FreeIsArchiveEncryptedMemory_ptr =
      _lookup<ffi.NativeFunction<_c_FreeIsArchiveEncryptedMemory>>(
          'FreeIsArchiveEncryptedMemory');
  late final _dart_FreeIsArchiveEncryptedMemory _FreeIsArchiveEncryptedMemory =
      _FreeIsArchiveEncryptedMemory_ptr.asFunction<
          _dart_FreeIsArchiveEncryptedMemory>();

  void PackFiles(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    int gitIgnorePatternPtrAddr,
    int fileListPtrAddr,
  ) {
    return _PackFiles(
      port,
      filename,
      password,
      gitIgnorePatternPtrAddr,
      fileListPtrAddr,
    );
  }

  late final _PackFiles_ptr =
      _lookup<ffi.NativeFunction<_c_PackFiles>>('PackFiles');
  late final _dart_PackFiles _PackFiles =
      _PackFiles_ptr.asFunction<_dart_PackFiles>();

  void FreePackFilesMemory(
    int ptrAddr,
  ) {
    return _FreePackFilesMemory(
      ptrAddr,
    );
  }

  late final _FreePackFilesMemory_ptr =
      _lookup<ffi.NativeFunction<_c_FreePackFilesMemory>>(
          'FreePackFilesMemory');
  late final _dart_FreePackFilesMemory _FreePackFilesMemory =
      _FreePackFilesMemory_ptr.asFunction<_dart_FreePackFilesMemory>();

  void UnpackFiles(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> destination,
    int gitIgnorePatternPtrAddr,
    int fileListPtrAddr,
  ) {
    return _UnpackFiles(
      port,
      filename,
      password,
      destination,
      gitIgnorePatternPtrAddr,
      fileListPtrAddr,
    );
  }

  late final _UnpackFiles_ptr =
      _lookup<ffi.NativeFunction<_c_UnpackFiles>>('UnpackFiles');
  late final _dart_UnpackFiles _UnpackFiles =
      _UnpackFiles_ptr.asFunction<_dart_UnpackFiles>();

  void FreeUnpackFilesMemory(
    int ptrAddr,
  ) {
    return _FreeUnpackFilesMemory(
      ptrAddr,
    );
  }

  late final _FreeUnpackFilesMemory_ptr =
      _lookup<ffi.NativeFunction<_c_FreeUnpackFilesMemory>>(
          'FreeUnpackFilesMemory');
  late final _dart_FreeUnpackFilesMemory _FreeUnpackFilesMemory =
      _FreeUnpackFilesMemory_ptr.asFunction<_dart_FreeUnpackFilesMemory>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  external int n;
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  external int len;

  @ffi.Int64()
  external int cap;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

typedef _c_InitNewNativeDartPort = ffi.Void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _dart_InitNewNativeDartPort = void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _c_CloseNativeDartPort = ffi.Uint8 Function(
  ffi.Int64 port,
);

typedef _dart_CloseNativeDartPort = int Function(
  int port,
);

typedef _c_TestFFI = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Uint8 recursive,
);

typedef _dart_TestFFI = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  int gitIgnorePatternPtrAddr,
  int recursive,
);

typedef _c_ListArchive = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Uint8 recursive,
);

typedef _dart_ListArchive = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  int gitIgnorePatternPtrAddr,
  int recursive,
);

typedef _c_FreeListArchiveMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeListArchiveMemory = void Function(
  int ptrAddr,
);

typedef _c_IsArchiveEncrypted = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_IsArchiveEncrypted = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FreeIsArchiveEncryptedMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeIsArchiveEncryptedMemory = void Function(
  int ptrAddr,
);

typedef _c_PackFiles = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Int64 fileListPtrAddr,
);

typedef _dart_PackFiles = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  int gitIgnorePatternPtrAddr,
  int fileListPtrAddr,
);

typedef _c_FreePackFilesMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreePackFilesMemory = void Function(
  int ptrAddr,
);

typedef _c_UnpackFiles = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> destination,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Int64 fileListPtrAddr,
);

typedef _dart_UnpackFiles = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> destination,
  int gitIgnorePatternPtrAddr,
  int fileListPtrAddr,
);

typedef _c_FreeUnpackFilesMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeUnpackFilesMemory = void Function(
  int ptrAddr,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
