// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Docs for SquashArchiverLib
class SquashArchiverLib {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  SquashArchiverLib(ffi.DynamicLibrary dynamicLibrary)
      : _dylib = dynamicLibrary;

  void InitNewNativeDartPort(
    ffi.Pointer<ffi.Void> api,
  ) {
    _InitNewNativeDartPort ??= _dylib.lookupFunction<_c_InitNewNativeDartPort,
        _dart_InitNewNativeDartPort>('InitNewNativeDartPort');
    return _InitNewNativeDartPort(
      api,
    );
  }

  _dart_InitNewNativeDartPort _InitNewNativeDartPort;

  int CloseNativeDartPort(
    int port,
  ) {
    _CloseNativeDartPort ??= _dylib.lookupFunction<_c_CloseNativeDartPort,
        _dart_CloseNativeDartPort>('CloseNativeDartPort');
    return _CloseNativeDartPort(
      port,
    );
  }

  _dart_CloseNativeDartPort _CloseNativeDartPort;

  void ListArchive(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> orderBy,
    ffi.Pointer<ffi.Int8> orderDir,
    ffi.Pointer<ffi.Int8> listDirectoryPath,
    int gitIgnorePatternPtrAddr,
    int recursive,
  ) {
    _ListArchive ??=
        _dylib.lookupFunction<_c_ListArchive, _dart_ListArchive>('ListArchive');
    return _ListArchive(
      port,
      filename,
      password,
      orderBy,
      orderDir,
      listDirectoryPath,
      gitIgnorePatternPtrAddr,
      recursive,
    );
  }

  _dart_ListArchive _ListArchive;

  void FreeListArchiveMemory(
    int ptrAddr,
  ) {
    _FreeListArchiveMemory ??= _dylib.lookupFunction<_c_FreeListArchiveMemory,
        _dart_FreeListArchiveMemory>('FreeListArchiveMemory');
    return _FreeListArchiveMemory(
      ptrAddr,
    );
  }

  _dart_FreeListArchiveMemory _FreeListArchiveMemory;

  void IsArchiveEncrypted(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _IsArchiveEncrypted ??=
        _dylib.lookupFunction<_c_IsArchiveEncrypted, _dart_IsArchiveEncrypted>(
            'IsArchiveEncrypted');
    return _IsArchiveEncrypted(
      port,
      filename,
      password,
    );
  }

  _dart_IsArchiveEncrypted _IsArchiveEncrypted;

  void FreeIsArchiveEncryptedMemory(
    int ptrAddr,
  ) {
    _FreeIsArchiveEncryptedMemory ??= _dylib.lookupFunction<
        _c_FreeIsArchiveEncryptedMemory,
        _dart_FreeIsArchiveEncryptedMemory>('FreeIsArchiveEncryptedMemory');
    return _FreeIsArchiveEncryptedMemory(
      ptrAddr,
    );
  }

  _dart_FreeIsArchiveEncryptedMemory _FreeIsArchiveEncryptedMemory;

  void PackFiles(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    int gitIgnorePatternPtrAddr,
    int fileListPtrAddr,
  ) {
    _PackFiles ??=
        _dylib.lookupFunction<_c_PackFiles, _dart_PackFiles>('PackFiles');
    return _PackFiles(
      port,
      filename,
      password,
      gitIgnorePatternPtrAddr,
      fileListPtrAddr,
    );
  }

  _dart_PackFiles _PackFiles;

  void FreePackFilesMemory(
    int ptrAddr,
  ) {
    _FreePackFilesMemory ??= _dylib.lookupFunction<_c_FreePackFilesMemory,
        _dart_FreePackFilesMemory>('FreePackFilesMemory');
    return _FreePackFilesMemory(
      ptrAddr,
    );
  }

  _dart_FreePackFilesMemory _FreePackFilesMemory;

  void Unpack() {
    _Unpack ??= _dylib.lookupFunction<_c_Unpack, _dart_Unpack>('Unpack');
    return _Unpack();
  }

  _dart_Unpack _Unpack;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class _GoString_ extends ffi.Struct {
  ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  int n;
}

class GoInterface extends ffi.Struct {
  ffi.Pointer<ffi.Void> t;

  ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  int len;

  @ffi.Int64()
  int cap;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

typedef _c_InitNewNativeDartPort = ffi.Void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _dart_InitNewNativeDartPort = void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _c_CloseNativeDartPort = ffi.Uint8 Function(
  ffi.Int64 port,
);

typedef _dart_CloseNativeDartPort = int Function(
  int port,
);

typedef _c_ListArchive = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Uint8 recursive,
);

typedef _dart_ListArchive = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  int gitIgnorePatternPtrAddr,
  int recursive,
);

typedef _c_FreeListArchiveMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeListArchiveMemory = void Function(
  int ptrAddr,
);

typedef _c_IsArchiveEncrypted = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_IsArchiveEncrypted = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FreeIsArchiveEncryptedMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeIsArchiveEncryptedMemory = void Function(
  int ptrAddr,
);

typedef _c_PackFiles = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Int64 gitIgnorePatternPtrAddr,
  ffi.Int64 fileListPtrAddr,
);

typedef _dart_PackFiles = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  int gitIgnorePatternPtrAddr,
  int fileListPtrAddr,
);

typedef _c_FreePackFilesMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreePackFilesMemory = void Function(
  int ptrAddr,
);

typedef _c_Unpack = ffi.Void Function();

typedef _dart_Unpack = void Function();

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
