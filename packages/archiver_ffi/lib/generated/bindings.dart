// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Docs for SquashArchiverLib
class SquashArchiverLib {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  SquashArchiverLib(ffi.DynamicLibrary dynamicLibrary)
      : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
  ) {
    _signal ??= _dylib.lookupFunction<_c_signal, _dart_signal>('signal');
    return _signal(
      arg0,
      arg1,
    );
  }

  _dart_signal _signal;

  int getpriority(
    int arg0,
    int arg1,
  ) {
    _getpriority ??=
        _dylib.lookupFunction<_c_getpriority, _dart_getpriority>('getpriority');
    return _getpriority(
      arg0,
      arg1,
    );
  }

  _dart_getpriority _getpriority;

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    _getiopolicy_np ??=
        _dylib.lookupFunction<_c_getiopolicy_np, _dart_getiopolicy_np>(
            'getiopolicy_np');
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  _dart_getiopolicy_np _getiopolicy_np;

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    _getrlimit ??=
        _dylib.lookupFunction<_c_getrlimit, _dart_getrlimit>('getrlimit');
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  _dart_getrlimit _getrlimit;

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    _getrusage ??=
        _dylib.lookupFunction<_c_getrusage, _dart_getrusage>('getrusage');
    return _getrusage(
      arg0,
      arg1,
    );
  }

  _dart_getrusage _getrusage;

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _setpriority ??=
        _dylib.lookupFunction<_c_setpriority, _dart_setpriority>('setpriority');
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_setpriority _setpriority;

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _setiopolicy_np ??=
        _dylib.lookupFunction<_c_setiopolicy_np, _dart_setiopolicy_np>(
            'setiopolicy_np');
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_setiopolicy_np _setiopolicy_np;

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    _setrlimit ??=
        _dylib.lookupFunction<_c_setrlimit, _dart_setrlimit>('setrlimit');
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  _dart_setrlimit _setrlimit;

  int _OSSwapInt16(
    int _data,
  ) {
    __OSSwapInt16 ??= _dylib
        .lookupFunction<_c__OSSwapInt16, _dart__OSSwapInt16>('_OSSwapInt16');
    return __OSSwapInt16(
      _data,
    );
  }

  _dart__OSSwapInt16 __OSSwapInt16;

  int _OSSwapInt32(
    int _data,
  ) {
    __OSSwapInt32 ??= _dylib
        .lookupFunction<_c__OSSwapInt32, _dart__OSSwapInt32>('_OSSwapInt32');
    return __OSSwapInt32(
      _data,
    );
  }

  _dart__OSSwapInt32 __OSSwapInt32;

  int _OSSwapInt64(
    int _data,
  ) {
    __OSSwapInt64 ??= _dylib
        .lookupFunction<_c__OSSwapInt64, _dart__OSSwapInt64>('_OSSwapInt64');
    return __OSSwapInt64(
      _data,
    );
  }

  _dart__OSSwapInt64 __OSSwapInt64;

  int wait(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    _wait ??= _dylib.lookupFunction<_c_wait, _dart_wait>('wait');
    return _wait(
      arg0,
    );
  }

  _dart_wait _wait;

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _waitpid ??= _dylib.lookupFunction<_c_waitpid, _dart_waitpid>('waitpid');
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_waitpid _waitpid;

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    _waitid ??= _dylib.lookupFunction<_c_waitid, _dart_waitid>('waitid');
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_waitid _waitid;

  int wait3(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    _wait3 ??= _dylib.lookupFunction<_c_wait3, _dart_wait3>('wait3');
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_wait3 _wait3;

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    _wait4 ??= _dylib.lookupFunction<_c_wait4, _dart_wait4>('wait4');
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_wait4 _wait4;

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    _alloca ??= _dylib.lookupFunction<_c_alloca, _dart_alloca>('alloca');
    return _alloca(
      arg0,
    );
  }

  _dart_alloca _alloca;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    _malloc ??= _dylib.lookupFunction<_c_malloc, _dart_malloc>('malloc');
    return _malloc(
      __size,
    );
  }

  _dart_malloc _malloc;

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    _calloc ??= _dylib.lookupFunction<_c_calloc, _dart_calloc>('calloc');
    return _calloc(
      __count,
      __size,
    );
  }

  _dart_calloc _calloc;

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _free ??= _dylib.lookupFunction<_c_free, _dart_free>('free');
    return _free(
      arg0,
    );
  }

  _dart_free _free;

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    _realloc ??= _dylib.lookupFunction<_c_realloc, _dart_realloc>('realloc');
    return _realloc(
      __ptr,
      __size,
    );
  }

  _dart_realloc _realloc;

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    _valloc ??= _dylib.lookupFunction<_c_valloc, _dart_valloc>('valloc');
    return _valloc(
      arg0,
    );
  }

  _dart_valloc _valloc;

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    _aligned_alloc ??= _dylib
        .lookupFunction<_c_aligned_alloc, _dart_aligned_alloc>('aligned_alloc');
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  _dart_aligned_alloc _aligned_alloc;

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    _posix_memalign ??=
        _dylib.lookupFunction<_c_posix_memalign, _dart_posix_memalign>(
            'posix_memalign');
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  _dart_posix_memalign _posix_memalign;

  void abort() {
    _abort ??= _dylib.lookupFunction<_c_abort, _dart_abort>('abort');
    return _abort();
  }

  _dart_abort _abort;

  int abs(
    int arg0,
  ) {
    _abs ??= _dylib.lookupFunction<_c_abs, _dart_abs>('abs');
    return _abs(
      arg0,
    );
  }

  _dart_abs _abs;

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
  ) {
    _atexit ??= _dylib.lookupFunction<_c_atexit, _dart_atexit>('atexit');
    return _atexit(
      arg0,
    );
  }

  _dart_atexit _atexit;

  double atof(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _atof ??= _dylib.lookupFunction<_c_atof, _dart_atof>('atof');
    return _atof(
      arg0,
    );
  }

  _dart_atof _atof;

  int atoi(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _atoi ??= _dylib.lookupFunction<_c_atoi, _dart_atoi>('atoi');
    return _atoi(
      arg0,
    );
  }

  _dart_atoi _atoi;

  int atol(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _atol ??= _dylib.lookupFunction<_c_atol, _dart_atol>('atol');
    return _atol(
      arg0,
    );
  }

  _dart_atol _atol;

  int atoll(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _atoll ??= _dylib.lookupFunction<_c_atoll, _dart_atoll>('atoll');
    return _atoll(
      arg0,
    );
  }

  _dart_atoll _atoll;

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
  ) {
    _bsearch ??= _dylib.lookupFunction<_c_bsearch, _dart_bsearch>('bsearch');
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  _dart_bsearch _bsearch;

  void exit(
    int arg0,
  ) {
    _exit ??= _dylib.lookupFunction<_c_exit, _dart_exit>('exit');
    return _exit(
      arg0,
    );
  }

  _dart_exit _exit;

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getenv ??= _dylib.lookupFunction<_c_getenv, _dart_getenv>('getenv');
    return _getenv(
      arg0,
    );
  }

  _dart_getenv _getenv;

  int labs(
    int arg0,
  ) {
    _labs ??= _dylib.lookupFunction<_c_labs, _dart_labs>('labs');
    return _labs(
      arg0,
    );
  }

  _dart_labs _labs;

  int llabs(
    int arg0,
  ) {
    _llabs ??= _dylib.lookupFunction<_c_llabs, _dart_llabs>('llabs');
    return _llabs(
      arg0,
    );
  }

  _dart_llabs _llabs;

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mblen ??= _dylib.lookupFunction<_c_mblen, _dart_mblen>('mblen');
    return _mblen(
      __s,
      __n,
    );
  }

  _dart_mblen _mblen;

  int mbstowcs(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _mbstowcs ??=
        _dylib.lookupFunction<_c_mbstowcs, _dart_mbstowcs>('mbstowcs');
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_mbstowcs _mbstowcs;

  int mbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _mbtowc ??= _dylib.lookupFunction<_c_mbtowc, _dart_mbtowc>('mbtowc');
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_mbtowc _mbtowc;

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
  ) {
    _qsort ??= _dylib.lookupFunction<_c_qsort, _dart_qsort>('qsort');
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  _dart_qsort _qsort;

  int rand() {
    _rand ??= _dylib.lookupFunction<_c_rand, _dart_rand>('rand');
    return _rand();
  }

  _dart_rand _rand;

  void srand(
    int arg0,
  ) {
    _srand ??= _dylib.lookupFunction<_c_srand, _dart_srand>('srand');
    return _srand(
      arg0,
    );
  }

  _dart_srand _srand;

  double strtod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    _strtod ??= _dylib.lookupFunction<_c_strtod, _dart_strtod>('strtod');
    return _strtod(
      arg0,
      arg1,
    );
  }

  _dart_strtod _strtod;

  double strtof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    _strtof ??= _dylib.lookupFunction<_c_strtof, _dart_strtof>('strtof');
    return _strtof(
      arg0,
      arg1,
    );
  }

  _dart_strtof _strtof;

  int strtol(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtol ??= _dylib.lookupFunction<_c_strtol, _dart_strtol>('strtol');
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtol _strtol;

  int strtoll(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoll ??= _dylib.lookupFunction<_c_strtoll, _dart_strtoll>('strtoll');
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtoll _strtoll;

  int strtoul(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoul ??= _dylib.lookupFunction<_c_strtoul, _dart_strtoul>('strtoul');
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtoul _strtoul;

  int strtoull(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoull ??=
        _dylib.lookupFunction<_c_strtoull, _dart_strtoull>('strtoull');
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtoull _strtoull;

  int system(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _system ??= _dylib.lookupFunction<_c_system, _dart_system>('system');
    return _system(
      arg0,
    );
  }

  _dart_system _system;

  int wcstombs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _wcstombs ??=
        _dylib.lookupFunction<_c_wcstombs, _dart_wcstombs>('wcstombs');
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_wcstombs _wcstombs;

  int wctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _wctomb ??= _dylib.lookupFunction<_c_wctomb, _dart_wctomb>('wctomb');
    return _wctomb(
      arg0,
      arg1,
    );
  }

  _dart_wctomb _wctomb;

  void _Exit(
    int arg0,
  ) {
    __Exit ??= _dylib.lookupFunction<_c__Exit, _dart__Exit>('_Exit');
    return __Exit(
      arg0,
    );
  }

  _dart__Exit __Exit;

  int a64l(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _a64l ??= _dylib.lookupFunction<_c_a64l, _dart_a64l>('a64l');
    return _a64l(
      arg0,
    );
  }

  _dart_a64l _a64l;

  double drand48() {
    _drand48 ??= _dylib.lookupFunction<_c_drand48, _dart_drand48>('drand48');
    return _drand48();
  }

  _dart_drand48 _drand48;

  ffi.Pointer<ffi.Int8> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _ecvt ??= _dylib.lookupFunction<_c_ecvt, _dart_ecvt>('ecvt');
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ecvt _ecvt;

  double erand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    _erand48 ??= _dylib.lookupFunction<_c_erand48, _dart_erand48>('erand48');
    return _erand48(
      arg0,
    );
  }

  _dart_erand48 _erand48;

  ffi.Pointer<ffi.Int8> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _fcvt ??= _dylib.lookupFunction<_c_fcvt, _dart_fcvt>('fcvt');
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_fcvt _fcvt;

  ffi.Pointer<ffi.Int8> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _gcvt ??= _dylib.lookupFunction<_c_gcvt, _dart_gcvt>('gcvt');
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_gcvt _gcvt;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _getsubopt ??=
        _dylib.lookupFunction<_c_getsubopt, _dart_getsubopt>('getsubopt');
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_getsubopt _getsubopt;

  int grantpt(
    int arg0,
  ) {
    _grantpt ??= _dylib.lookupFunction<_c_grantpt, _dart_grantpt>('grantpt');
    return _grantpt(
      arg0,
    );
  }

  _dart_grantpt _grantpt;

  ffi.Pointer<ffi.Int8> initstate(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _initstate ??=
        _dylib.lookupFunction<_c_initstate, _dart_initstate>('initstate');
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_initstate _initstate;

  int jrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    _jrand48 ??= _dylib.lookupFunction<_c_jrand48, _dart_jrand48>('jrand48');
    return _jrand48(
      arg0,
    );
  }

  _dart_jrand48 _jrand48;

  ffi.Pointer<ffi.Int8> l64a(
    int arg0,
  ) {
    _l64a ??= _dylib.lookupFunction<_c_l64a, _dart_l64a>('l64a');
    return _l64a(
      arg0,
    );
  }

  _dart_l64a _l64a;

  void lcong48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    _lcong48 ??= _dylib.lookupFunction<_c_lcong48, _dart_lcong48>('lcong48');
    return _lcong48(
      arg0,
    );
  }

  _dart_lcong48 _lcong48;

  int lrand48() {
    _lrand48 ??= _dylib.lookupFunction<_c_lrand48, _dart_lrand48>('lrand48');
    return _lrand48();
  }

  _dart_lrand48 _lrand48;

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _mktemp ??= _dylib.lookupFunction<_c_mktemp, _dart_mktemp>('mktemp');
    return _mktemp(
      arg0,
    );
  }

  _dart_mktemp _mktemp;

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _mkstemp ??= _dylib.lookupFunction<_c_mkstemp, _dart_mkstemp>('mkstemp');
    return _mkstemp(
      arg0,
    );
  }

  _dart_mkstemp _mkstemp;

  int mrand48() {
    _mrand48 ??= _dylib.lookupFunction<_c_mrand48, _dart_mrand48>('mrand48');
    return _mrand48();
  }

  _dart_mrand48 _mrand48;

  int nrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    _nrand48 ??= _dylib.lookupFunction<_c_nrand48, _dart_nrand48>('nrand48');
    return _nrand48(
      arg0,
    );
  }

  _dart_nrand48 _nrand48;

  int posix_openpt(
    int arg0,
  ) {
    _posix_openpt ??= _dylib
        .lookupFunction<_c_posix_openpt, _dart_posix_openpt>('posix_openpt');
    return _posix_openpt(
      arg0,
    );
  }

  _dart_posix_openpt _posix_openpt;

  ffi.Pointer<ffi.Int8> ptsname(
    int arg0,
  ) {
    _ptsname ??= _dylib.lookupFunction<_c_ptsname, _dart_ptsname>('ptsname');
    return _ptsname(
      arg0,
    );
  }

  _dart_ptsname _ptsname;

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Int8> buffer,
    int buflen,
  ) {
    _ptsname_r ??=
        _dylib.lookupFunction<_c_ptsname_r, _dart_ptsname_r>('ptsname_r');
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  _dart_ptsname_r _ptsname_r;

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _putenv ??= _dylib.lookupFunction<_c_putenv, _dart_putenv>('putenv');
    return _putenv(
      arg0,
    );
  }

  _dart_putenv _putenv;

  int random() {
    _random ??= _dylib.lookupFunction<_c_random, _dart_random>('random');
    return _random();
  }

  _dart_random _random;

  int rand_r(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    _rand_r ??= _dylib.lookupFunction<_c_rand_r, _dart_rand_r>('rand_r');
    return _rand_r(
      arg0,
    );
  }

  _dart_rand_r _rand_r;

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _realpath ??=
        _dylib.lookupFunction<_c_realpath, _dart_realpath>('realpath');
    return _realpath(
      arg0,
      arg1,
    );
  }

  _dart_realpath _realpath;

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    _seed48 ??= _dylib.lookupFunction<_c_seed48, _dart_seed48>('seed48');
    return _seed48(
      arg0,
    );
  }

  _dart_seed48 _seed48;

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    _setenv ??= _dylib.lookupFunction<_c_setenv, _dart_setenv>('setenv');
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  _dart_setenv _setenv;

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setkey ??= _dylib.lookupFunction<_c_setkey, _dart_setkey>('setkey');
    return _setkey(
      arg0,
    );
  }

  _dart_setkey _setkey;

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setstate ??=
        _dylib.lookupFunction<_c_setstate, _dart_setstate>('setstate');
    return _setstate(
      arg0,
    );
  }

  _dart_setstate _setstate;

  void srand48(
    int arg0,
  ) {
    _srand48 ??= _dylib.lookupFunction<_c_srand48, _dart_srand48>('srand48');
    return _srand48(
      arg0,
    );
  }

  _dart_srand48 _srand48;

  void srandom(
    int arg0,
  ) {
    _srandom ??= _dylib.lookupFunction<_c_srandom, _dart_srandom>('srandom');
    return _srandom(
      arg0,
    );
  }

  _dart_srandom _srandom;

  int unlockpt(
    int arg0,
  ) {
    _unlockpt ??=
        _dylib.lookupFunction<_c_unlockpt, _dart_unlockpt>('unlockpt');
    return _unlockpt(
      arg0,
    );
  }

  _dart_unlockpt _unlockpt;

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _unsetenv ??=
        _dylib.lookupFunction<_c_unsetenv, _dart_unsetenv>('unsetenv');
    return _unsetenv(
      arg0,
    );
  }

  _dart_unsetenv _unsetenv;

  int arc4random() {
    _arc4random ??=
        _dylib.lookupFunction<_c_arc4random, _dart_arc4random>('arc4random');
    return _arc4random();
  }

  _dart_arc4random _arc4random;

  void arc4random_addrandom(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    _arc4random_addrandom ??= _dylib.lookupFunction<_c_arc4random_addrandom,
        _dart_arc4random_addrandom>('arc4random_addrandom');
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  _dart_arc4random_addrandom _arc4random_addrandom;

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    _arc4random_buf ??=
        _dylib.lookupFunction<_c_arc4random_buf, _dart_arc4random_buf>(
            'arc4random_buf');
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  _dart_arc4random_buf _arc4random_buf;

  void arc4random_stir() {
    _arc4random_stir ??=
        _dylib.lookupFunction<_c_arc4random_stir, _dart_arc4random_stir>(
            'arc4random_stir');
    return _arc4random_stir();
  }

  _dart_arc4random_stir _arc4random_stir;

  int arc4random_uniform(
    int __upper_bound,
  ) {
    _arc4random_uniform ??=
        _dylib.lookupFunction<_c_arc4random_uniform, _dart_arc4random_uniform>(
            'arc4random_uniform');
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  _dart_arc4random_uniform _arc4random_uniform;

  ffi.Pointer<ffi.Int8> cgetcap(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _cgetcap ??= _dylib.lookupFunction<_c_cgetcap, _dart_cgetcap>('cgetcap');
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_cgetcap _cgetcap;

  int cgetclose() {
    _cgetclose ??=
        _dylib.lookupFunction<_c_cgetclose, _dart_cgetclose>('cgetclose');
    return _cgetclose();
  }

  _dart_cgetclose _cgetclose;

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _cgetent ??= _dylib.lookupFunction<_c_cgetent, _dart_cgetent>('cgetent');
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_cgetent _cgetent;

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    _cgetfirst ??=
        _dylib.lookupFunction<_c_cgetfirst, _dart_cgetfirst>('cgetfirst');
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  _dart_cgetfirst _cgetfirst;

  int cgetmatch(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _cgetmatch ??=
        _dylib.lookupFunction<_c_cgetmatch, _dart_cgetmatch>('cgetmatch');
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  _dart_cgetmatch _cgetmatch;

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    _cgetnext ??=
        _dylib.lookupFunction<_c_cgetnext, _dart_cgetnext>('cgetnext');
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  _dart_cgetnext _cgetnext;

  int cgetnum(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int64> arg2,
  ) {
    _cgetnum ??= _dylib.lookupFunction<_c_cgetnum, _dart_cgetnum>('cgetnum');
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_cgetnum _cgetnum;

  int cgetset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _cgetset ??= _dylib.lookupFunction<_c_cgetset, _dart_cgetset>('cgetset');
    return _cgetset(
      arg0,
    );
  }

  _dart_cgetset _cgetset;

  int cgetstr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _cgetstr ??= _dylib.lookupFunction<_c_cgetstr, _dart_cgetstr>('cgetstr');
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_cgetstr _cgetstr;

  int cgetustr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _cgetustr ??=
        _dylib.lookupFunction<_c_cgetustr, _dart_cgetustr>('cgetustr');
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_cgetustr _cgetustr;

  int daemon(
    int arg0,
    int arg1,
  ) {
    _daemon ??= _dylib.lookupFunction<_c_daemon, _dart_daemon>('daemon');
    return _daemon(
      arg0,
      arg1,
    );
  }

  _dart_daemon _daemon;

  ffi.Pointer<ffi.Int8> devname(
    int arg0,
    int arg1,
  ) {
    _devname ??= _dylib.lookupFunction<_c_devname, _dart_devname>('devname');
    return _devname(
      arg0,
      arg1,
    );
  }

  _dart_devname _devname;

  ffi.Pointer<ffi.Int8> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    _devname_r ??=
        _dylib.lookupFunction<_c_devname_r, _dart_devname_r>('devname_r');
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  _dart_devname_r _devname_r;

  ffi.Pointer<ffi.Int8> getbsize(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _getbsize ??=
        _dylib.lookupFunction<_c_getbsize, _dart_getbsize>('getbsize');
    return _getbsize(
      arg0,
      arg1,
    );
  }

  _dart_getbsize _getbsize;

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    _getloadavg ??=
        _dylib.lookupFunction<_c_getloadavg, _dart_getloadavg>('getloadavg');
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  _dart_getloadavg _getloadavg;

  ffi.Pointer<ffi.Int8> getprogname() {
    _getprogname ??=
        _dylib.lookupFunction<_c_getprogname, _dart_getprogname>('getprogname');
    return _getprogname();
  }

  _dart_getprogname _getprogname;

  void setprogname(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setprogname ??=
        _dylib.lookupFunction<_c_setprogname, _dart_setprogname>('setprogname');
    return _setprogname(
      arg0,
    );
  }

  _dart_setprogname _setprogname;

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
  ) {
    _heapsort ??=
        _dylib.lookupFunction<_c_heapsort, _dart_heapsort>('heapsort');
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  _dart_heapsort _heapsort;

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
  ) {
    _mergesort ??=
        _dylib.lookupFunction<_c_mergesort, _dart_mergesort>('mergesort');
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  _dart_mergesort _mergesort;

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
  ) {
    _psort ??= _dylib.lookupFunction<_c_psort, _dart_psort>('psort');
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  _dart_psort _psort;

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
  ) {
    _psort_r ??= _dylib.lookupFunction<_c_psort_r, _dart_psort_r>('psort_r');
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  _dart_psort_r _psort_r;

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
  ) {
    _qsort_r ??= _dylib.lookupFunction<_c_qsort_r, _dart_qsort_r>('qsort_r');
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  _dart_qsort_r _qsort_r;

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    _radixsort ??=
        _dylib.lookupFunction<_c_radixsort, _dart_radixsort>('radixsort');
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  _dart_radixsort _radixsort;

  int rpmatch(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _rpmatch ??= _dylib.lookupFunction<_c_rpmatch, _dart_rpmatch>('rpmatch');
    return _rpmatch(
      arg0,
    );
  }

  _dart_rpmatch _rpmatch;

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    _sradixsort ??=
        _dylib.lookupFunction<_c_sradixsort, _dart_sradixsort>('sradixsort');
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  _dart_sradixsort _sradixsort;

  void sranddev() {
    _sranddev ??=
        _dylib.lookupFunction<_c_sranddev, _dart_sranddev>('sranddev');
    return _sranddev();
  }

  _dart_sranddev _sranddev;

  void srandomdev() {
    _srandomdev ??=
        _dylib.lookupFunction<_c_srandomdev, _dart_srandomdev>('srandomdev');
    return _srandomdev();
  }

  _dart_srandomdev _srandomdev;

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    _reallocf ??=
        _dylib.lookupFunction<_c_reallocf, _dart_reallocf>('reallocf');
    return _reallocf(
      __ptr,
      __size,
    );
  }

  _dart_reallocf _reallocf;

  int strtoq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoq ??= _dylib.lookupFunction<_c_strtoq, _dart_strtoq>('strtoq');
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtoq _strtoq;

  int strtouq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtouq ??= _dylib.lookupFunction<_c_strtouq, _dart_strtouq>('strtouq');
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  _dart_strtouq _strtouq;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _renameat ??=
        _dylib.lookupFunction<_c_renameat, _dart_renameat>('renameat');
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_renameat _renameat;

  int renamex_np(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _renamex_np ??=
        _dylib.lookupFunction<_c_renamex_np, _dart_renamex_np>('renamex_np');
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_renamex_np _renamex_np;

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    _renameatx_np ??= _dylib
        .lookupFunction<_c_renameatx_np, _dart_renameatx_np>('renameatx_np');
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_renameatx_np _renameatx_np;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    _clearerr ??=
        _dylib.lookupFunction<_c_clearerr, _dart_clearerr>('clearerr');
    return _clearerr(
      arg0,
    );
  }

  _dart_clearerr _clearerr;

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    _fclose ??= _dylib.lookupFunction<_c_fclose, _dart_fclose>('fclose');
    return _fclose(
      arg0,
    );
  }

  _dart_fclose _fclose;

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    _feof ??= _dylib.lookupFunction<_c_feof, _dart_feof>('feof');
    return _feof(
      arg0,
    );
  }

  _dart_feof _feof;

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    _ferror ??= _dylib.lookupFunction<_c_ferror, _dart_ferror>('ferror');
    return _ferror(
      arg0,
    );
  }

  _dart_ferror _ferror;

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    _fflush ??= _dylib.lookupFunction<_c_fflush, _dart_fflush>('fflush');
    return _fflush(
      arg0,
    );
  }

  _dart_fflush _fflush;

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    _fgetc ??= _dylib.lookupFunction<_c_fgetc, _dart_fgetc>('fgetc');
    return _fgetc(
      arg0,
    );
  }

  _dart_fgetc _fgetc;

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _fgetpos ??= _dylib.lookupFunction<_c_fgetpos, _dart_fgetpos>('fgetpos');
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  _dart_fgetpos _fgetpos;

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    _fgets ??= _dylib.lookupFunction<_c_fgets, _dart_fgets>('fgets');
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_fgets _fgets;

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    _fopen ??= _dylib.lookupFunction<_c_fopen, _dart_fopen>('fopen');
    return _fopen(
      __filename,
      __mode,
    );
  }

  _dart_fopen _fopen;

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fprintf ??= _dylib.lookupFunction<_c_fprintf, _dart_fprintf>('fprintf');
    return _fprintf(
      arg0,
      arg1,
    );
  }

  _dart_fprintf _fprintf;

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _fputc ??= _dylib.lookupFunction<_c_fputc, _dart_fputc>('fputc');
    return _fputc(
      arg0,
      arg1,
    );
  }

  _dart_fputc _fputc;

  int fputs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _fputs ??= _dylib.lookupFunction<_c_fputs, _dart_fputs>('fputs');
    return _fputs(
      arg0,
      arg1,
    );
  }

  _dart_fputs _fputs;

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    _fread ??= _dylib.lookupFunction<_c_fread, _dart_fread>('fread');
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  _dart_fread _fread;

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    _freopen ??= _dylib.lookupFunction<_c_freopen, _dart_freopen>('freopen');
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_freopen _freopen;

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fscanf ??= _dylib.lookupFunction<_c_fscanf, _dart_fscanf>('fscanf');
    return _fscanf(
      arg0,
      arg1,
    );
  }

  _dart_fscanf _fscanf;

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    _fseek ??= _dylib.lookupFunction<_c_fseek, _dart_fseek>('fseek');
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_fseek _fseek;

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _fsetpos ??= _dylib.lookupFunction<_c_fsetpos, _dart_fsetpos>('fsetpos');
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  _dart_fsetpos _fsetpos;

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    _ftell ??= _dylib.lookupFunction<_c_ftell, _dart_ftell>('ftell');
    return _ftell(
      arg0,
    );
  }

  _dart_ftell _ftell;

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    _fwrite ??= _dylib.lookupFunction<_c_fwrite, _dart_fwrite>('fwrite');
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  _dart_fwrite _fwrite;

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    _getc ??= _dylib.lookupFunction<_c_getc, _dart_getc>('getc');
    return _getc(
      arg0,
    );
  }

  _dart_getc _getc;

  int getchar() {
    _getchar ??= _dylib.lookupFunction<_c_getchar, _dart_getchar>('getchar');
    return _getchar();
  }

  _dart_getchar _getchar;

  ffi.Pointer<ffi.Int8> gets(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _gets ??= _dylib.lookupFunction<_c_gets, _dart_gets>('gets');
    return _gets(
      arg0,
    );
  }

  _dart_gets _gets;

  void perror(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _perror ??= _dylib.lookupFunction<_c_perror, _dart_perror>('perror');
    return _perror(
      arg0,
    );
  }

  _dart_perror _perror;

  int printf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _printf ??= _dylib.lookupFunction<_c_printf, _dart_printf>('printf');
    return _printf(
      arg0,
    );
  }

  _dart_printf _printf;

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _putc ??= _dylib.lookupFunction<_c_putc, _dart_putc>('putc');
    return _putc(
      arg0,
      arg1,
    );
  }

  _dart_putc _putc;

  int putchar(
    int arg0,
  ) {
    _putchar ??= _dylib.lookupFunction<_c_putchar, _dart_putchar>('putchar');
    return _putchar(
      arg0,
    );
  }

  _dart_putchar _putchar;

  int puts(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _puts ??= _dylib.lookupFunction<_c_puts, _dart_puts>('puts');
    return _puts(
      arg0,
    );
  }

  _dart_puts _puts;

  int remove(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _remove ??= _dylib.lookupFunction<_c_remove, _dart_remove>('remove');
    return _remove(
      arg0,
    );
  }

  _dart_remove _remove;

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _rename ??= _dylib.lookupFunction<_c_rename, _dart_rename>('rename');
    return _rename(
      __old,
      __new,
    );
  }

  _dart_rename _rename;

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    _rewind ??= _dylib.lookupFunction<_c_rewind, _dart_rewind>('rewind');
    return _rewind(
      arg0,
    );
  }

  _dart_rewind _rewind;

  int scanf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _scanf ??= _dylib.lookupFunction<_c_scanf, _dart_scanf>('scanf');
    return _scanf(
      arg0,
    );
  }

  _dart_scanf _scanf;

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _setbuf ??= _dylib.lookupFunction<_c_setbuf, _dart_setbuf>('setbuf');
    return _setbuf(
      arg0,
      arg1,
    );
  }

  _dart_setbuf _setbuf;

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    _setvbuf ??= _dylib.lookupFunction<_c_setvbuf, _dart_setvbuf>('setvbuf');
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_setvbuf _setvbuf;

  int sprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _sprintf ??= _dylib.lookupFunction<_c_sprintf, _dart_sprintf>('sprintf');
    return _sprintf(
      arg0,
      arg1,
    );
  }

  _dart_sprintf _sprintf;

  int sscanf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _sscanf ??= _dylib.lookupFunction<_c_sscanf, _dart_sscanf>('sscanf');
    return _sscanf(
      arg0,
      arg1,
    );
  }

  _dart_sscanf _sscanf;

  ffi.Pointer<FILE> tmpfile() {
    _tmpfile ??= _dylib.lookupFunction<_c_tmpfile, _dart_tmpfile>('tmpfile');
    return _tmpfile();
  }

  _dart_tmpfile _tmpfile;

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _tmpnam ??= _dylib.lookupFunction<_c_tmpnam, _dart_tmpnam>('tmpnam');
    return _tmpnam(
      arg0,
    );
  }

  _dart_tmpnam _tmpnam;

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _ungetc ??= _dylib.lookupFunction<_c_ungetc, _dart_ungetc>('ungetc');
    return _ungetc(
      arg0,
      arg1,
    );
  }

  _dart_ungetc _ungetc;

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vfprintf ??=
        _dylib.lookupFunction<_c_vfprintf, _dart_vfprintf>('vfprintf');
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vfprintf _vfprintf;

  int vprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    _vprintf ??= _dylib.lookupFunction<_c_vprintf, _dart_vprintf>('vprintf');
    return _vprintf(
      arg0,
      arg1,
    );
  }

  _dart_vprintf _vprintf;

  int vsprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vsprintf ??=
        _dylib.lookupFunction<_c_vsprintf, _dart_vsprintf>('vsprintf');
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vsprintf _vsprintf;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ctermid ??= _dylib.lookupFunction<_c_ctermid, _dart_ctermid>('ctermid');
    return _ctermid(
      arg0,
    );
  }

  _dart_ctermid _ctermid;

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fdopen ??= _dylib.lookupFunction<_c_fdopen, _dart_fdopen>('fdopen');
    return _fdopen(
      arg0,
      arg1,
    );
  }

  _dart_fdopen _fdopen;

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    _fileno ??= _dylib.lookupFunction<_c_fileno, _dart_fileno>('fileno');
    return _fileno(
      arg0,
    );
  }

  _dart_fileno _fileno;

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    _pclose ??= _dylib.lookupFunction<_c_pclose, _dart_pclose>('pclose');
    return _pclose(
      arg0,
    );
  }

  _dart_pclose _pclose;

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _popen ??= _dylib.lookupFunction<_c_popen, _dart_popen>('popen');
    return _popen(
      arg0,
      arg1,
    );
  }

  _dart_popen _popen;

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    ___srget ??= _dylib.lookupFunction<_c___srget, _dart___srget>('__srget');
    return ___srget(
      arg0,
    );
  }

  _dart___srget ___srget;

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    ___svfscanf ??=
        _dylib.lookupFunction<_c___svfscanf, _dart___svfscanf>('__svfscanf');
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart___svfscanf ___svfscanf;

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    ___swbuf ??= _dylib.lookupFunction<_c___swbuf, _dart___swbuf>('__swbuf');
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  _dart___swbuf ___swbuf;

  int __sputc(
    int _c,
    ffi.Pointer<FILE> _p,
  ) {
    ___sputc ??= _dylib.lookupFunction<_c___sputc, _dart___sputc>('__sputc');
    return ___sputc(
      _c,
      _p,
    );
  }

  _dart___sputc ___sputc;

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    _flockfile ??=
        _dylib.lookupFunction<_c_flockfile, _dart_flockfile>('flockfile');
    return _flockfile(
      arg0,
    );
  }

  _dart_flockfile _flockfile;

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    _ftrylockfile ??= _dylib
        .lookupFunction<_c_ftrylockfile, _dart_ftrylockfile>('ftrylockfile');
    return _ftrylockfile(
      arg0,
    );
  }

  _dart_ftrylockfile _ftrylockfile;

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    _funlockfile ??=
        _dylib.lookupFunction<_c_funlockfile, _dart_funlockfile>('funlockfile');
    return _funlockfile(
      arg0,
    );
  }

  _dart_funlockfile _funlockfile;

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    _getc_unlocked ??= _dylib
        .lookupFunction<_c_getc_unlocked, _dart_getc_unlocked>('getc_unlocked');
    return _getc_unlocked(
      arg0,
    );
  }

  _dart_getc_unlocked _getc_unlocked;

  int getchar_unlocked() {
    _getchar_unlocked ??=
        _dylib.lookupFunction<_c_getchar_unlocked, _dart_getchar_unlocked>(
            'getchar_unlocked');
    return _getchar_unlocked();
  }

  _dart_getchar_unlocked _getchar_unlocked;

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _putc_unlocked ??= _dylib
        .lookupFunction<_c_putc_unlocked, _dart_putc_unlocked>('putc_unlocked');
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  _dart_putc_unlocked _putc_unlocked;

  int putchar_unlocked(
    int arg0,
  ) {
    _putchar_unlocked ??=
        _dylib.lookupFunction<_c_putchar_unlocked, _dart_putchar_unlocked>(
            'putchar_unlocked');
    return _putchar_unlocked(
      arg0,
    );
  }

  _dart_putchar_unlocked _putchar_unlocked;

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    _getw ??= _dylib.lookupFunction<_c_getw, _dart_getw>('getw');
    return _getw(
      arg0,
    );
  }

  _dart_getw _getw;

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    _putw ??= _dylib.lookupFunction<_c_putw, _dart_putw>('putw');
    return _putw(
      arg0,
      arg1,
    );
  }

  _dart_putw _putw;

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __prefix,
  ) {
    _tempnam ??= _dylib.lookupFunction<_c_tempnam, _dart_tempnam>('tempnam');
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  _dart_tempnam _tempnam;

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    _fseeko ??= _dylib.lookupFunction<_c_fseeko, _dart_fseeko>('fseeko');
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  _dart_fseeko _fseeko;

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    _ftello ??= _dylib.lookupFunction<_c_ftello, _dart_ftello>('ftello');
    return _ftello(
      __stream,
    );
  }

  _dart_ftello _ftello;

  int snprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _snprintf ??=
        _dylib.lookupFunction<_c_snprintf, _dart_snprintf>('snprintf');
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  _dart_snprintf _snprintf;

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vfscanf ??= _dylib.lookupFunction<_c_vfscanf, _dart_vfscanf>('vfscanf');
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  _dart_vfscanf _vfscanf;

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    _vscanf ??= _dylib.lookupFunction<_c_vscanf, _dart_vscanf>('vscanf');
    return _vscanf(
      __format,
      arg1,
    );
  }

  _dart_vscanf _vscanf;

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    _vsnprintf ??=
        _dylib.lookupFunction<_c_vsnprintf, _dart_vsnprintf>('vsnprintf');
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  _dart_vsnprintf _vsnprintf;

  int vsscanf(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vsscanf ??= _dylib.lookupFunction<_c_vsscanf, _dart_vsscanf>('vsscanf');
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  _dart_vsscanf _vsscanf;

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _dprintf ??= _dylib.lookupFunction<_c_dprintf, _dart_dprintf>('dprintf');
    return _dprintf(
      arg0,
      arg1,
    );
  }

  _dart_dprintf _dprintf;

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vdprintf ??=
        _dylib.lookupFunction<_c_vdprintf, _dart_vdprintf>('vdprintf');
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vdprintf _vdprintf;

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    _getdelim ??=
        _dylib.lookupFunction<_c_getdelim, _dart_getdelim>('getdelim');
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  _dart_getdelim _getdelim;

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    _getline ??= _dylib.lookupFunction<_c_getline, _dart_getline>('getline');
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  _dart_getline _getline;

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    _fmemopen ??=
        _dylib.lookupFunction<_c_fmemopen, _dart_fmemopen>('fmemopen');
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  _dart_fmemopen _fmemopen;

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
    ffi.Pointer<ffi.Uint64> __sizep,
  ) {
    _open_memstream ??=
        _dylib.lookupFunction<_c_open_memstream, _dart_open_memstream>(
            'open_memstream');
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  _dart_open_memstream _open_memstream;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _asprintf ??=
        _dylib.lookupFunction<_c_asprintf, _dart_asprintf>('asprintf');
    return _asprintf(
      arg0,
      arg1,
    );
  }

  _dart_asprintf _asprintf;

  ffi.Pointer<ffi.Int8> ctermid_r(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ctermid_r ??=
        _dylib.lookupFunction<_c_ctermid_r, _dart_ctermid_r>('ctermid_r');
    return _ctermid_r(
      arg0,
    );
  }

  _dart_ctermid_r _ctermid_r;

  ffi.Pointer<ffi.Int8> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _fgetln ??= _dylib.lookupFunction<_c_fgetln, _dart_fgetln>('fgetln');
    return _fgetln(
      arg0,
      arg1,
    );
  }

  _dart_fgetln _fgetln;

  ffi.Pointer<ffi.Int8> fmtcheck(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fmtcheck ??=
        _dylib.lookupFunction<_c_fmtcheck, _dart_fmtcheck>('fmtcheck');
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  _dart_fmtcheck _fmtcheck;

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    _fpurge ??= _dylib.lookupFunction<_c_fpurge, _dart_fpurge>('fpurge');
    return _fpurge(
      arg0,
    );
  }

  _dart_fpurge _fpurge;

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _setbuffer ??=
        _dylib.lookupFunction<_c_setbuffer, _dart_setbuffer>('setbuffer');
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_setbuffer _setbuffer;

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    _setlinebuf ??=
        _dylib.lookupFunction<_c_setlinebuf, _dart_setlinebuf>('setlinebuf');
    return _setlinebuf(
      arg0,
    );
  }

  _dart_setlinebuf _setlinebuf;

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vasprintf ??=
        _dylib.lookupFunction<_c_vasprintf, _dart_vasprintf>('vasprintf');
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vasprintf _vasprintf;

  ffi.Pointer<FILE> zopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _zopen ??= _dylib.lookupFunction<_c_zopen, _dart_zopen>('zopen');
    return _zopen(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_zopen _zopen;

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_20>> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_21>> arg4,
  ) {
    _funopen ??= _dylib.lookupFunction<_c_funopen, _dart_funopen>('funopen');
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_funopen _funopen;

  int __sprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    ___sprintf_chk ??= _dylib
        .lookupFunction<_c___sprintf_chk, _dart___sprintf_chk>('__sprintf_chk');
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart___sprintf_chk ___sprintf_chk;

  int __snprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    ___snprintf_chk ??=
        _dylib.lookupFunction<_c___snprintf_chk, _dart___snprintf_chk>(
            '__snprintf_chk');
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart___snprintf_chk ___snprintf_chk;

  int __vsprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    ___vsprintf_chk ??=
        _dylib.lookupFunction<_c___vsprintf_chk, _dart___vsprintf_chk>(
            '__vsprintf_chk');
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart___vsprintf_chk ___vsprintf_chk;

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    ___vsnprintf_chk ??=
        _dylib.lookupFunction<_c___vsnprintf_chk, _dart___vsnprintf_chk>(
            '__vsnprintf_chk');
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart___vsnprintf_chk ___vsnprintf_chk;

  void InitNewNativeDartPort(
    ffi.Pointer<ffi.Void> api,
  ) {
    _InitNewNativeDartPort ??= _dylib.lookupFunction<_c_InitNewNativeDartPort,
        _dart_InitNewNativeDartPort>('InitNewNativeDartPort');
    return _InitNewNativeDartPort(
      api,
    );
  }

  _dart_InitNewNativeDartPort _InitNewNativeDartPort;

  int CloseNativeDartPort(
    int port,
  ) {
    _CloseNativeDartPort ??= _dylib.lookupFunction<_c_CloseNativeDartPort,
        _dart_CloseNativeDartPort>('CloseNativeDartPort');
    return _CloseNativeDartPort(
      port,
    );
  }

  _dart_CloseNativeDartPort _CloseNativeDartPort;

  void ListArchive(
    int port,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> orderBy,
    ffi.Pointer<ffi.Int8> orderDir,
    ffi.Pointer<ffi.Int8> listDirectoryPath,
    int gitIgnorePatternAddr,
    int recursive,
  ) {
    _ListArchive ??=
        _dylib.lookupFunction<_c_ListArchive, _dart_ListArchive>('ListArchive');
    return _ListArchive(
      port,
      filename,
      password,
      orderBy,
      orderDir,
      listDirectoryPath,
      gitIgnorePatternAddr,
      recursive,
    );
  }

  _dart_ListArchive _ListArchive;

  void FreeListArchiveMemory(
    int ptrAddr,
  ) {
    _FreeListArchiveMemory ??= _dylib.lookupFunction<_c_FreeListArchiveMemory,
        _dart_FreeListArchiveMemory>('FreeListArchiveMemory');
    return _FreeListArchiveMemory(
      ptrAddr,
    );
  }

  _dart_FreeListArchiveMemory _FreeListArchiveMemory;

  void IsArchiveEncrypted() {
    _IsArchiveEncrypted ??=
        _dylib.lookupFunction<_c_IsArchiveEncrypted, _dart_IsArchiveEncrypted>(
            'IsArchiveEncrypted');
    return _IsArchiveEncrypted();
  }

  _dart_IsArchiveEncrypted _IsArchiveEncrypted;

  void Pack() {
    _Pack ??= _dylib.lookupFunction<_c_Pack, _dart_Pack>('Pack');
    return _Pack();
  }

  _dart_Pack _Pack;

  void Unpack() {
    _Unpack ??= _dylib.lookupFunction<_c_Unpack, _dart_Unpack>('Unpack');
    return _Unpack();
  }

  _dart_Unpack _Unpack;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class _GoString_ extends ffi.Struct {
  ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  int n;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  int __eax;

  @ffi.Uint32()
  int __ebx;

  @ffi.Uint32()
  int __ecx;

  @ffi.Uint32()
  int __edx;

  @ffi.Uint32()
  int __edi;

  @ffi.Uint32()
  int __esi;

  @ffi.Uint32()
  int __ebp;

  @ffi.Uint32()
  int __esp;

  @ffi.Uint32()
  int __ss;

  @ffi.Uint32()
  int __eflags;

  @ffi.Uint32()
  int __eip;

  @ffi.Uint32()
  int __cs;

  @ffi.Uint32()
  int __ds;

  @ffi.Uint32()
  int __es;

  @ffi.Uint32()
  int __fs;

  @ffi.Uint32()
  int __gs;
}

class __darwin_fp_control extends ffi.Struct {}

class __darwin_fp_status extends ffi.Struct {}

class __darwin_mmst_reg extends ffi.Struct {}

class __darwin_xmm_reg extends ffi.Struct {}

class __darwin_ymm_reg extends ffi.Struct {}

class __darwin_zmm_reg extends ffi.Struct {}

class __darwin_opmask_reg extends ffi.Struct {}

class __darwin_i386_float_state extends ffi.Struct {}

class __darwin_i386_avx_state extends ffi.Struct {}

class __darwin_i386_avx512_state extends ffi.Struct {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  int __trapno;

  @ffi.Uint16()
  int __cpu;

  @ffi.Uint32()
  int __err;

  @ffi.Uint32()
  int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  int __dr0;

  @ffi.Uint32()
  int __dr1;

  @ffi.Uint32()
  int __dr2;

  @ffi.Uint32()
  int __dr3;

  @ffi.Uint32()
  int __dr4;

  @ffi.Uint32()
  int __dr5;

  @ffi.Uint32()
  int __dr6;

  @ffi.Uint32()
  int __dr7;
}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  int __rax;

  @ffi.Uint64()
  int __rbx;

  @ffi.Uint64()
  int __rcx;

  @ffi.Uint64()
  int __rdx;

  @ffi.Uint64()
  int __rdi;

  @ffi.Uint64()
  int __rsi;

  @ffi.Uint64()
  int __rbp;

  @ffi.Uint64()
  int __rsp;

  @ffi.Uint64()
  int __r8;

  @ffi.Uint64()
  int __r9;

  @ffi.Uint64()
  int __r10;

  @ffi.Uint64()
  int __r11;

  @ffi.Uint64()
  int __r12;

  @ffi.Uint64()
  int __r13;

  @ffi.Uint64()
  int __r14;

  @ffi.Uint64()
  int __r15;

  @ffi.Uint64()
  int __rip;

  @ffi.Uint64()
  int __rflags;

  @ffi.Uint64()
  int __cs;

  @ffi.Uint64()
  int __fs;

  @ffi.Uint64()
  int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {}

class __darwin_x86_float_state64 extends ffi.Struct {}

class __darwin_x86_avx_state64 extends ffi.Struct {}

class __darwin_x86_avx512_state64 extends ffi.Struct {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  int __trapno;

  @ffi.Uint16()
  int __cpu;

  @ffi.Uint32()
  int __err;

  @ffi.Uint64()
  int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  int __dr0;

  @ffi.Uint64()
  int __dr1;

  @ffi.Uint64()
  int __dr2;

  @ffi.Uint64()
  int __dr3;

  @ffi.Uint64()
  int __dr4;

  @ffi.Uint64()
  int __dr5;

  @ffi.Uint64()
  int __dr6;

  @ffi.Uint64()
  int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Struct {}

class __darwin_mcontext32 extends ffi.Struct {}

class __darwin_mcontext_avx32 extends ffi.Struct {}

class __darwin_mcontext_avx512_32 extends ffi.Struct {}

class __darwin_mcontext64 extends ffi.Struct {}

class __darwin_mcontext64_full extends ffi.Struct {}

class __darwin_mcontext_avx64 extends ffi.Struct {}

class __darwin_mcontext_avx64_full extends ffi.Struct {}

class __darwin_mcontext_avx512_64 extends ffi.Struct {}

class __darwin_mcontext_avx512_64_full extends ffi.Struct {}

class __darwin_sigaltstack extends ffi.Struct {
  ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  int ss_size;

  @ffi.Int32()
  int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {}

class sigevent extends ffi.Struct {}

class siginfo_t extends ffi.Struct {}

class __sigaction extends ffi.Struct {}

class sigaction extends ffi.Struct {}

class sigvec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> sv_handler;

  @ffi.Int32()
  int sv_mask;

  @ffi.Int32()
  int sv_flags;
}

class sigstack extends ffi.Struct {
  ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  int ss_onstack;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int32()
  int tv_usec;
}

class rusage extends ffi.Struct {}

class rusage_info_v0 extends ffi.Struct {}

class rusage_info_v1 extends ffi.Struct {}

class rusage_info_v2 extends ffi.Struct {}

class rusage_info_v3 extends ffi.Struct {}

class rusage_info_v4 extends ffi.Struct {}

class rlimit extends ffi.Struct {
  @ffi.Uint64()
  int rlim_cur;

  @ffi.Uint64()
  int rlim_max;
}

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  int wm_flags;

  @ffi.Int32()
  int wm_rate;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  int quot;

  @ffi.Int32()
  int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class __sbuf extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  int _size;
}

class __sFILEX extends ffi.Struct {}

class FILE extends ffi.Struct {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  int gp_offset;

  @ffi.Uint32()
  int fp_offset;

  ffi.Pointer<ffi.Void> overflow_arg_area;

  ffi.Pointer<ffi.Void> reg_save_area;
}

class GoInterface extends ffi.Struct {
  ffi.Pointer<ffi.Void> t;

  ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  int len;

  @ffi.Int64()
  int cap;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_CURRENT = 4;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

typedef _typedefC_4 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _dart_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _c_getpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_getpriority = int Function(
  int arg0,
  int arg1,
);

typedef _c_getiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_getiopolicy_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_getrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_getrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_getrusage = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _dart_getrusage = int Function(
  int arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _c_setpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setpriority = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setiopolicy_np = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_setrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c__OSSwapInt16 = ffi.Uint16 Function(
  ffi.Uint16 _data,
);

typedef _dart__OSSwapInt16 = int Function(
  int _data,
);

typedef _c__OSSwapInt32 = ffi.Uint32 Function(
  ffi.Uint32 _data,
);

typedef _dart__OSSwapInt32 = int Function(
  int _data,
);

typedef _c__OSSwapInt64 = ffi.Uint64 Function(
  ffi.Uint64 _data,
);

typedef _dart__OSSwapInt64 = int Function(
  int _data,
);

typedef _c_wait = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_wait = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_waitpid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_waitpid = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_waitid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<siginfo_t> arg2,
  ffi.Int32 arg3,
);

typedef _dart_waitid = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<siginfo_t> arg2,
  int arg3,
);

typedef _c_wait3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _dart_wait3 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _c_wait4 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _dart_wait4 = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __count,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __count,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_abs = int Function(
  int arg0,
);

typedef _typedefC_6 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_exit = void Function(
  int arg0,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_labs = int Function(
  int arg0,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_llabs = int Function(
  int arg0,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srand = void Function(
  int arg0,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__Exit = void Function(
  int arg0,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_grantpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_grantpt = int Function(
  int arg0,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 arg0,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_posix_openpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_posix_openpt = int Function(
  int arg0,
);

typedef _c_ptsname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ptsname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ptsname_r = ffi.Int32 Function(
  ffi.Int32 fildes,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_ptsname_r = int Function(
  int fildes,
  ffi.Pointer<ffi.Int8> buffer,
  int buflen,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __overwrite,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __overwrite,
);

typedef _c_setkey = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setkey = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_srand48 = void Function(
  int arg0,
);

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srandom = void Function(
  int arg0,
);

typedef _c_unlockpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_unlockpt = int Function(
  int arg0,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_arc4random = ffi.Uint32 Function();

typedef _dart_arc4random = int Function();

typedef _c_arc4random_addrandom = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_arc4random_addrandom = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
);

typedef _c_arc4random_buf = ffi.Void Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_arc4random_buf = void Function(
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_arc4random_stir = ffi.Void Function();

typedef _dart_arc4random_stir = void Function();

typedef _c_arc4random_uniform = ffi.Uint32 Function(
  ffi.Uint32 __upper_bound,
);

typedef _dart_arc4random_uniform = int Function(
  int __upper_bound,
);

typedef _c_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_cgetclose = ffi.Int32 Function();

typedef _dart_cgetclose = int Function();

typedef _c_cgetent = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_cgetent = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_cgetfirst = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetfirst = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_cgetmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_cgetnext = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetnext = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetnum = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _dart_cgetnum = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _c_cgetset = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_cgetset = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_cgetstr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetstr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_cgetustr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetustr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_daemon = int Function(
  int arg0,
  int arg1,
);

typedef _c_devname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
);

typedef _dart_devname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
);

typedef _c_devname_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
);

typedef _dart_devname_r = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> buf,
  int len,
);

typedef _c_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

typedef _c_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _c_setprogname = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setprogname = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_heapsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _dart_heapsort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_mergesort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _dart_mergesort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _dart_psort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _dart_psort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _dart_qsort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _c_radixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_radixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_sradixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_sradixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_sranddev = ffi.Void Function();

typedef _dart_sranddev = void Function();

typedef _c_srandomdev = ffi.Void Function();

typedef _dart_srandomdev = void Function();

typedef _c_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_renameat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_renamex_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_renamex_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_renameatx_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
);

typedef _dart_renameatx_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_feof = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _c_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_fputc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _c_freopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _dart_freopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<FILE> arg0,
  int arg1,
  int arg2,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getc = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar = int Function(
  int arg0,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_tmpfile = ffi.Pointer<FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_ungetc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_fdopen = ffi.Pointer<FILE> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fdopen = ffi.Pointer<FILE> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_popen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_popen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c___srget = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart___srget = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c___svfscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart___svfscanf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c___swbuf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart___swbuf = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c___sputc = ffi.Int32 Function(
  ffi.Int32 _c,
  ffi.Pointer<FILE> _p,
);

typedef _dart___sputc = int Function(
  int _c,
  ffi.Pointer<FILE> _p,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putc_unlocked = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar_unlocked = int Function(
  int arg0,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getw = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putw = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<FILE> __stream,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<FILE> __stream,
  int __offset,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<FILE> __stream,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_dprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vdprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Int32 __delimiter,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<FILE> __stream,
);

typedef _c_fmemopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fmemopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  int __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_open_memstream = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _dart_open_memstream = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _c_asprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fpurge = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fpurge = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_setlinebuf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_setlinebuf = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_vasprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vasprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_zopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_zopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_18 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_20 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_21 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_funopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> arg4,
);

typedef _dart_funopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> arg4,
);

typedef _c___sprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart___sprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c___snprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart___snprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c___vsprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _dart___vsprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _c___vsnprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _dart___vsnprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _c_InitNewNativeDartPort = ffi.Void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _dart_InitNewNativeDartPort = void Function(
  ffi.Pointer<ffi.Void> api,
);

typedef _c_CloseNativeDartPort = ffi.Uint8 Function(
  ffi.Int64 port,
);

typedef _dart_CloseNativeDartPort = int Function(
  int port,
);

typedef _c_ListArchive = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  ffi.Int64 gitIgnorePatternAddr,
  ffi.Uint8 recursive,
);

typedef _dart_ListArchive = void Function(
  int port,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> orderBy,
  ffi.Pointer<ffi.Int8> orderDir,
  ffi.Pointer<ffi.Int8> listDirectoryPath,
  int gitIgnorePatternAddr,
  int recursive,
);

typedef _c_FreeListArchiveMemory = ffi.Void Function(
  ffi.Int64 ptrAddr,
);

typedef _dart_FreeListArchiveMemory = void Function(
  int ptrAddr,
);

typedef _c_IsArchiveEncrypted = ffi.Void Function();

typedef _dart_IsArchiveEncrypted = void Function();

typedef _c_Pack = ffi.Void Function();

typedef _dart_Pack = void Function();

typedef _c_Unpack = ffi.Void Function();

typedef _dart_Unpack = void Function();

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
);
